generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                  String             @id @default(uuid())
  name                String             @db.VarChar(63)
  cpf                 String             @unique @db.VarChar(127)
  registration        String?            @unique @db.VarChar(127)
  email               String             @unique @db.VarChar(127)
  telefone            String             @db.VarChar(127)
  courseStudy         String?            @db.VarChar(127)
  password            String             @db.VarChar(127)
  role                String             @db.VarChar(127)
  createdAt           DateTime           @default(now()) @db.Timestamp(0)
  updatedAt           DateTime           @default(now()) @db.Timestamp(0)
  id_institution      String?
  institution         Institution?         @relation("userInstitution", fields: [id_institution], references: [id], map: "tb_institution")
  TermsCommitment     TermCommitment[]     @relation("userTerm")
  internshipProcess   InternshipProcess [] @relation("alunoProcessoEstagio")
  files               File[]               @relation("userFile")
  Notifications     Notification[]     @relation("userNotification")

  @@map("tb_users")
}

model Notification {
  id          String   @id @default(uuid())
  id_user          String 
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user              User       @relation("userNotification", fields: [id_user], references: [id])
}

model File{
  id                  String             @id @default(uuid())
  filePath            String             @db.VarChar(255)
  userId              String             @db.VarChar(255)
  user                User               @relation("userFile",fields: [userId], references: [id])
  @@map("tb_user_files")
}

model Token{
  id        String   @id @default(uuid())
  hash      String   @db.VarChar(255)
  user_email  String   @db.VarChar(255)
  @@map("tb_token")
}

model Institution {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(63)
  campus    String   @db.VarChar(127)
  cnpj      String   @db.VarChar(127)
  UF        String   @db.VarChar(127)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0)
  users     User[]   @relation("userInstitution")

  @@map("tb_institution")
}

// model InternshipGrantor {
//   id                       String             @id @default(uuid())
//   name                     String             @db.VarChar(63)
//   cnpj                     String             @db.VarChar(127) @unique
//   cep                      String             @db.VarChar(127)
//   bairro                   String             @db.VarChar(127)
//   cidade                   String             @db.VarChar(127)
//   uf                       String             @db.VarChar(127)
//   endereco                 String             @db.VarChar(127)
//   email                    String             @db.VarChar(127)
//   representanteLegal       String             @db.VarChar(127)
//   funcaoRepresentanteLegal String             @db.VarChar(127)
//   supervisor               String             @db.VarChar(127)
//   cargoSupervisor          String             @db.VarChar(127)
  
//   createdAt           DateTime           @default(now()) @db.Timestamp(0)
//   updatedAt           DateTime           @default(now()) @db.Timestamp(0)
//   termsCommitment TermCommitment[] @relation("internshipGrantorTerm")

//   @@map("tb_internshipGrantor")
// }

model TermCommitment {
  id                String      @id @default(uuid())
  numApoliceSeguro  String?      @db.VarChar(63)
  nomeSeguradora    String?      @db.VarChar(127)
  profOrientador    String?      @db.VarChar(127)
  codSiape          String?      @db.VarChar(127)
  dataInicioEstagio DateTime    @db.Date
  dataFimEstagio    DateTime    @db.Date
  horaInicioEstagio DateTime    @db.Time(0)
  horaFimEstagio    DateTime    @db.Time(0)
  jornadaSemanal    DateTime    @db.Time(0)
  isObrigatorio     Boolean
  bolsaAuxilio      Float
  auxilioTransporte Float
  planoAtividadesEstagio String @db.Text()
  //dados concedente
  razaoSocialConcedente String @db.VarChar(127)
  cnpjConcedente String @db.VarChar(14)
  cepConcedente  String @db.VarChar(63)
  bairroConcedente String @db.VarChar(127)
  cidadeConcedente String @db.VarChar(127)
  ufConcedente       String @db.VarChar(127)
  enderecoConcedente String @db.VarChar(127)
  emailConcedente    String @db.VarChar(127)
  representanteLegalConcedente String @db.VarChar(127)
  funcaoRepresentanteLegalConcedente String @db.VarChar(127)
  supervisor String @db.VarChar(127)
  cargoSupervisor String @db.VarChar(127)
  filePath            String?     @db.VarChar(255)
  //relacionamento aluno
  id_user          String     
  user              User       @relation("userTerm", fields: [id_user], references: [id])

  //relacionamento concedente
  // id_internshipGrantor     String  
  // internshipGrantor        InternshipGrantor @relation("internshipGrantorTerm", fields: [id_internshipGrantor], references: [id])

  //relacionamento processo
  internshipProcess   InternshipProcess[]

  @@map("tb_termCommitment")
}

model InternshipProcess {
  id                  String      @id @default(uuid())
  movement            String      @db.VarChar(63)
  status              String      @db.VarChar(127)
  startDateProcess    DateTime   @default(now()) @db.Timestamp(0)
  endDateProcess      DateTime?   @db.Timestamp(0)


  //relacionamento termo de compromisso
  id_termCommitment   String?      @unique
  termCommitment TermCommitment?  @relation(fields: [id_termCommitment], references: [id])

  //relacionamento Aluno
  id_user           String     
  user              User       @relation("alunoProcessoEstagio", fields: [id_user], references: [id])

  //relacionamento AvaliacaoAluno
  internshipEvaluation InternshipEvaluation[] @relation("processoEstagioAvaliacao")

  statusHistory       InternshipProcessStatusHistory[] @relation("historicoStatusProcesso")
  
  @@map("tb_internshipProcess")
}

model InternshipProcessStatusHistory {
  id                  String      @id @default(uuid())
  startDate           DateTime   @default(now()) @db.Timestamp(0)
  endDate             DateTime?   @db.Timestamp(0)
  status              String      @db.VarChar(127)
  observacoes         String      @db.Text()
  id_internshipProcess String
  internshipProcess    InternshipProcess  @relation("historicoStatusProcesso", fields: [id_internshipProcess], references: [id])

  @@map("tb_internshipProcessStatusHistory")
}

model InternshipEvaluation{
  id                  String      @id @default(uuid())
  atividadesEstagio   String      @db.VarChar(63)
  componentesCurricularesUtilizados   String      @db.VarChar(127)
  aplicacaoDeConhecimentosCurso   String      @db.VarChar(127)
  startDateProcess  DateTime   @default(now()) @db.Timestamp(0)
  endDateProcess    DateTime   @db.Timestamp(0)
  id_user            String
  id_internshipProcess  String
  internshipProcess        InternshipProcess @relation("processoEstagioAvaliacao", fields: [id_internshipProcess], references: [id])
	@@map("tb_internshipEvaluation")
}