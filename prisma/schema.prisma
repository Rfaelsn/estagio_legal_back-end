generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String              @id @default(uuid())
  name                     String              @db.VarChar(63)
  cpf                      String              @unique @db.VarChar(127)
  rg                       String              @db.VarChar(127)
  academicRegistrationCode String?             @unique @db.VarChar(127)
  birthDate                DateTime            @db.Date
  email                    String              @unique @db.VarChar(127)
  telephone                String              @db.VarChar(127)
  courseStudy              String?             @db.VarChar(127)
  password                 String              @db.VarChar(127)
  role                     String              @db.VarChar(127)
  UF                       String              @db.VarChar(127)
  city                     String              @db.VarChar(127)
  district                 String              @db.VarChar(127)
  address                  String              @db.VarChar(127)
  postalCode               String              @db.VarChar(127)
  createdAt                DateTime            @default(now()) @db.Timestamp(0)
  updatedAt                DateTime            @default(now()) @db.Timestamp(0)
  id_institution           String?
  institution              Institution?        @relation("userInstitution", fields: [id_institution], references: [id], map: "tb_institution")
  TermsCommitment          TermCommitment[]    @relation("userTerm")
  internshipProcess        InternshipProcess[] @relation("studentInternshipProcess")
  Notifications            Notification[]      @relation("userNotification")

  @@map("tb_users")
}

model Notification {
  id        String   @id @default(uuid())
  id_user   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("userNotification", fields: [id_user], references: [id])

  @@map("tb_notifications")
}

model File {
  id                         String                     @id @default(uuid())
  filePath                   String                     @unique
  fileType                   String                     @db.VarChar(255)
  isAssigned                 Boolean                    @default(false)
  internshipProcessHistories InternshipProcessHistory[] @relation("ProcessHistoryFiles")

  @@map("tb_internship_process_files")
}

model Institution {
  id                      String    @id @default(uuid())
  name                    String    @db.VarChar(63)
  campus                  String    @db.VarChar(127)
  cnpj                    String    @db.VarChar(127)
  UF                      String    @db.VarChar(127)
  city                    String    @db.VarChar(127)
  district                String    @db.VarChar(127)
  address                 String    @db.VarChar(127)
  telephone               String    @db.VarChar(127)
  postalCode              String    @db.VarChar(127)
  legalRepresentative     String    @db.VarChar(127)
  legalRepresentativeRole String    @db.VarChar(127)
  createdAt               DateTime? @default(now()) @db.Timestamp(0)
  updatedAt               DateTime? @default(now()) @db.Timestamp(0)
  users                   User[]    @relation("userInstitution")

  @@map("tb_institution")
}

model TermCommitment {
  id                                 String              @id @default(uuid())
  insurancePolicyNumber              String?             @db.VarChar(63)
  insuranceCompanyName               String?             @db.VarChar(127)
  advisorProfessor                   String?             @db.VarChar(127)
  siapeCode                          String?             @db.VarChar(127)
  internshipStartDate                DateTime            @db.Date
  internshipEndDate                  DateTime            @db.Date
  internshipStartTime                DateTime            @db.Time(0)
  internshipEndTime                  DateTime            @db.Time(0)
  weeklyWorkload                     Float
  isMandatory                        Boolean
  internshipGrant                    Float
  transportationAllowance            Float
  internshipActivityPlan             String              @db.Text()
  grantingCompanyName                String              @db.VarChar(127)
  grantingCompanyCNPJ                String              @db.VarChar(14)
  grantingCompanyPostalCode          String              @db.VarChar(63)
  grantingCompanyDistrict            String              @db.VarChar(127)
  grantingCompanyCity                String              @db.VarChar(127)
  grantingCompanyState               String              @db.VarChar(127)
  grantingCompanyAddress             String              @db.VarChar(127)
  grantingCompanyEmail               String              @db.VarChar(127)
  grantingCompanyLegalRepresentative String              @db.VarChar(127)
  legalRepresentativeRole            String              @db.VarChar(127)
  supervisor                         String              @db.VarChar(127)
  supervisorPosition                 String              @db.VarChar(127)
  filePath                           String?             @db.VarChar(255)
  id_user                            String
  user                               User                @relation("userTerm", fields: [id_user], references: [id])
  internshipProcess                  InternshipProcess[]

  @@map("tb_termCommitment")
}

model InternshipProcess {
  id               String    @id @default(uuid())
  movement         String    @db.VarChar(63)
  status           String    @db.VarChar(127)
  startDateProcess DateTime  @default(now()) @db.Timestamp(0)
  endDateProcess   DateTime? @db.Timestamp(0)

  id_termCommitment String?         @unique
  termCommitment    TermCommitment? @relation(fields: [id_termCommitment], references: [id])
  createdAt         DateTime        @default(now()) @db.Timestamp(0)
  updatedAt         DateTime        @default(now()) @db.Timestamp(0)

  id_user String
  user    User   @relation("studentInternshipProcess", fields: [id_user], references: [id])

  statusHistory InternshipProcessHistory[] @relation("statusHistory_process")

  @@map("tb_internshipProcess")
}

model InternshipProcessHistory {
  id                  String            @id @default(uuid())
  startDate           DateTime          @default(now()) @db.Timestamp(0)
  endDate             DateTime?         @db.Timestamp(0)
  status              String            @db.VarChar(127)
  movement            String            @db.VarChar(127)
  description         String?           @db.Text()
  observations        String?           @db.Text()
  files               File[]            @relation("ProcessHistoryFiles")
  idInternshipProcess String
  internshipProcess   InternshipProcess @relation("statusHistory_process", fields: [idInternshipProcess], references: [id])
  createdAt           DateTime          @default(now()) @db.Timestamp(0)

  @@map("tb_internshipProcessStatusHistory")
}
